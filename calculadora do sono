import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from datetime import datetime, timedelta

class CalculadoraSono:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculadora do Sono")
        self.root.geometry("500x700")
        self.root.configure(bg="#e6e6fa")

        # Variáveis
        self.var_opcao = tk.StringVar(value="")
        self.horario_selecionado = tk.StringVar(value="Selecionar")
        self.tabela_visivel = False

        # Título
        titulo = tk.Label(root, 
                         text="Calculadora de Ciclos do Sono", 
                         font=("Helvetica", 18, "bold"),
                         bg="#e6e6fa", pady=10)
        titulo.pack()

        # Frame para os botões de opção
        frame_opcoes = tk.Frame(root, bg="#e6e6fa")
        frame_opcoes.pack(pady=15)

        # Botões de opção estilizados
        self.btn_acordar = tk.Button(frame_opcoes,
                                   text="Acordar",
                                   command=lambda: self.selecionar_opcao("acordar"),
                                   font=("Helvetica", 11),
                                   bg="#9370db",
                                   fg="white",
                                   width=15,
                                   height=1)
        self.btn_acordar.pack(side=tk.LEFT, padx=5)

        self.btn_adormecer = tk.Button(frame_opcoes,
                                     text="Adormecer",
                                     command=lambda: self.selecionar_opcao("adormecer"),
                                     font=("Helvetica", 11),
                                     bg="#9370db",
                                     fg="white",
                                     width=15,
                                     height=1)
        self.btn_adormecer.pack(side=tk.LEFT, padx=5)

        # Frame para seleção de hora
        frame_hora = tk.Frame(root, bg="#e6e6fa")
        frame_hora.pack(pady=15)

        # Botão de hora com ícone
        self.btn_hora = tk.Button(frame_hora,
                                textvariable=self.horario_selecionado,
                                command=self.mostrar_selecionar_hora,
                                font=("Helvetica", 11),
                                bg="white",
                                width=12,
                                height=1,
                                compound=tk.RIGHT,
                                padx=10)
        self.btn_hora.pack(side=tk.LEFT)
        
        # Adicionar o ícone '^' como um label separado
        tk.Label(self.btn_hora,
                text="▼",
                font=("Helvetica", 8),
                bg="white").place(relx=0.85, rely=0.5, anchor="center")

        # Botão de calcular
        self.btn_calcular = tk.Button(root,
                                    text="Calcular",
                                    command=self.calcular_tempo,
                                    font=("Helvetica", 11),
                                    bg="#9370db",
                                    fg="white",
                                    width=15,
                                    height=1)
        self.btn_calcular.pack(pady=15)

        # Frame para a tabela (inicialmente oculto)
        self.frame_tabela = tk.Frame(root, bg="#e6e6fa")
        
        # Criar tabela (mas não exibir ainda)
        self.criar_tabela()

    def criar_tabela(self):
        # Criar cabeçalho
        colunas = ['Ciclos (90\')', 'Hora de Acordar', 'Tempo de Sono']
        for i, coluna in enumerate(colunas):
            lbl = tk.Label(self.frame_tabela, 
                          text=coluna,
                          font=("Helvetica", 11, "bold"),
                          bg="#f0f0f0",
                          width=15,
                          relief=tk.RIDGE)
            lbl.grid(row=0, column=i, sticky="nsew", padx=1, pady=1)

        # Criar linhas vazias para resultados
        self.celulas = []
        for i in range(6):
            linha = []
            for j in range(3):
                celula = tk.Label(self.frame_tabela,
                                text="",
                                font=("Helvetica", 11),
                                width=15,
                                relief=tk.RIDGE)
                celula.grid(row=i+1, column=j, sticky="nsew", padx=1, pady=1)
                linha.append(celula)
            self.celulas.append(linha)

    def get_cor_fundo(self, ciclo):
        if ciclo >= 5:
            return "#90EE90"  # Verde claro
        elif ciclo == 4:
            return "#FFFFE0"  # Amarelo claro
        else:
            return "#FFB6C1"  # Rosa claro

    def selecionar_opcao(self, opcao):
        self.var_opcao.set(opcao)
        # Cores mais escuras para seleção
        if opcao == "acordar":
            self.btn_acordar.configure(bg="#483D8B")  # Azul mais escuro
            self.btn_adormecer.configure(bg="#9370db")  # Cor original
        else:
            self.btn_adormecer.configure(bg="#483D8B")  # Azul mais escuro
            self.btn_acordar.configure(bg="#9370db")  # Cor original

    def calcular_horarios(self, base_horario, opcao, ciclos=6):
        base = datetime.strptime(base_horario, "%H:%M")
        resultados = []

        for ciclo in range(1, ciclos + 1):
            ajuste = timedelta(minutes=90 * ciclo)
            if opcao == "adormecer":
                calculado = base + ajuste
            else:
                calculado = base - ajuste
            resultados.append((ciclo, calculado.strftime("%H:%M"), ciclo * 90))

        return resultados[::-1]

    def atualizar_tabela(self, resultados):
        # Mostrar frame da tabela se ainda não estiver visível
        if not self.tabela_visivel:
            self.frame_tabela.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)
            self.tabela_visivel = True

        # Limpar tabela
        for linha in self.celulas:
            for celula in linha:
                celula.config(text="", bg="white")

        # Preencher com novos resultados
        for i, (ciclo, horario, minutos) in enumerate(resultados):
            cor = self.get_cor_fundo(ciclo)
            self.celulas[i][0].config(text=str(ciclo), bg=cor)
            self.celulas[i][1].config(text=horario, bg=cor)
            self.celulas[i][2].config(text=str(minutos), bg=cor)

    def calcular_tempo(self):
        opcao = self.var_opcao.get()
        horario_base = self.horario_selecionado.get()
        
        if opcao and horario_base != "Selecionar":
            try:
                resultados = self.calcular_horarios(horario_base, opcao)
                self.atualizar_tabela(resultados)
            except ValueError:
                messagebox.showerror("Erro", "Formato de hora incorreto. Use HH:MM")
        else:
            messagebox.showerror("Erro", "Selecione uma opção e insira a hora.")

    def mostrar_selecionar_hora(self):
        horario_lista = []
        for h in range(24):
            for m in [0, 30]:
                horario_lista.append(f"{h:02d}:{m:02d}")

        janela_selecao = tk.Toplevel(self.root)
        janela_selecao.title("Hora")
        janela_selecao.configure(bg="#e6e6fa")
        
        def selecionar_horario():
            self.horario_selecionado.set(lista_horarios.get(tk.ACTIVE))
            janela_selecao.destroy()

        lista_horarios = tk.Listbox(janela_selecao, 
                                  height=10, 
                                  width=15, 
                                  font=("Helvetica", 11), 
                                  selectmode=tk.SINGLE)
        for horario in horario_lista:
            lista_horarios.insert(tk.END, horario)
        lista_horarios.pack(pady=10)

        tk.Button(janela_selecao, 
                 text="Selecionar", 
                 command=selecionar_horario, 
                 font=("Helvetica", 11), 
                 bg="#9370db", 
                 fg="white").pack(pady=5)

if __name__ == "__main__":
    root = tk.Tk()
    app = CalculadoraSono(root)
    root.mainloop()
